do $$
  begin
    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs') then
      create table "systemConfigs" (
        "id" INT  PRIMARY KEY NOT NULL,
        "defaultMinionCount" INT DEFAULT 1 NOT NULL,
        "defaultPipelineCount" INT DEFAULT 1 NOT NULL,
        "serverEnabled" BOOLEAN NOT NULL,
        "autoSelectBuilderToken" BOOLEAN,
        "buildTimeoutMS" INT DEFAULT 3600000 NOT NULL,
        "defaultPrivateJobQuota" INT DEFAULT 150 NOT NULL,
        "serviceUserToken" VARCHAR(36) NOT NULL,
        "vaultUrl" VARCHAR(255),
        "vaultToken" VARCHAR(45),
        "vaultRefreshTimeInSec" INT,
        "amqpUrl" VARCHAR(255),
        "amqpUrlRoot" VARCHAR(255),
        "amqpUrlAdmin" VARCHAR(255),
        "amqpDefaultExchange" VARCHAR(255),
        "apiUrl" VARCHAR(255),
        "apiPort" INT,
        "wwwUrl" VARCHAR(255),
        "runMode" VARCHAR(255) DEFAULT 'debug' NOT NULL,
        "rootQueueList" TEXT,
        "execImage" VARCHAR(255) NOT NULL,
        "wwwPort" INTEGER NOT NULL,
        "redisUrl" VARCHAR(255) NOT NULL,
        "awsAccountId" VARCHAR(12),
        "jobConsoleBatchSize" INTEGER NOT NULL,
        "jobConsoleBufferTimeInterval" INTEGER NOT NULL,
        "defaultCronLoopHours" INTEGER NOT NULL,
        "apiRetryInterval" INTEGER NOT NULL,
        "vortexUrl" VARCHAR(255) NOT NULL,
        "cloudProviders" VARCHAR(80) NOT NULL,
        "truck" BOOLEAN NOT NULL,
        "hubspotTimeLimit" INTEGER NOT NULL,
        "hubspotListId" INTEGER NOT NULL,
        "hubspotShouldSimulate" BOOLEAN NOT NULL,
        "createdAt" timestamp with time zone NOT NULL,
        "updatedAt" timestamp with time zone NOT NULL
      );
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'dynamicNodesSystemIntegrationId') then
      alter table "systemConfigs" add column "dynamicNodesSystemIntegrationId" VARCHAR(24);
      -- add default value
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'systemNodePrivateKey') then
      alter table "systemConfigs" add column "systemNodePrivateKey" TEXT;
      -- add default value
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'systemNodePublicKey') then
      alter table "systemConfigs" add column "systemNodePublicKey" VARCHAR(1020);
      -- add default value
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'allowSystemNodes') then
      alter table "systemConfigs" add column "allowSystemNodes" BOOLEAN default false;
      -- add default value
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'allowDynamicNodes') then
      alter table "systemConfigs" add column "allowDynamicNodes" BOOLEAN default false;
      -- add default value
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'allowCustomNodes') then
      alter table "systemConfigs" add column "allowCustomNodes" BOOLEAN default false;
      -- add default value
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'consoleMaxLifespan') then
      alter table "systemConfigs" add column "consoleMaxLifespan" INT default 0;
      -- add default value
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'consoleCleanupHour') then
      alter table "systemConfigs" add column "consoleCleanupHour" INT default 0;
      -- add default value
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'customHostDockerVersion' and data_type = 'integer') then
      alter table "systemConfigs" alter column "customHostDockerVersion" type VARCHAR(24);
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'customHostDockerVersion') then
      alter table "systemConfigs" add column "customHostDockerVersion" VARCHAR(24);
      -- add default value
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'wwwPort') then
      alter table "systemConfigs" add column "wwwPort" INTEGER;
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'redisUrl') then
      alter table "systemConfigs" add column "redisUrl" varchar(255);
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'awsAccountId') then
      alter table "systemConfigs" add column "awsAccountId" varchar(12);
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'jobConsoleBatchSize') then
      alter table "systemConfigs" add column "jobConsoleBatchSize" INTEGER;
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'jobConsoleBufferTimeInterval') then
      alter table "systemConfigs" add column "jobConsoleBufferTimeInterval" INTEGER;
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'defaultCronLoopHours') then
      alter table "systemConfigs" add column "defaultCronLoopHours" INTEGER;
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'apiRetryInterval') then
      alter table "systemConfigs" add column "apiRetryInterval" INTEGER;
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'vortexUrl') then
      alter table "systemConfigs" add column "vortexUrl" varchar(255);
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'cloudProviders') then
      alter table "systemConfigs" add column "cloudProviders" varchar(80);
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'truck') then
      alter table "systemConfigs" add column "truck" BOOLEAN;
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'hubspotShouldSimulate') then
      alter table "systemConfigs" add column "hubspotShouldSimulate" BOOLEAN;
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'hubspotTimeLimit') then
      alter table "systemConfigs" add column "hubspotTimeLimit" INTEGER;
    end if;

    if not exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'hubspotListId') then
      alter table "systemConfigs" add column "hubspotListId" INTEGER;
    end if;

    alter table "systemConfigs" owner to "apiuser";
  end
$$;

do $$
  begin
    --Update values in systemConfigs
    if exists (select 1 from "systemConfigs" where "id" = 1) then
        update "systemConfigs" SET
            "defaultMinionCount"={{DEFAULT_MINION_COUNT}},
            "defaultPipelineCount"={{DEFAULT_PIPELINE_COUNT}},
            "serverEnabled"={{SERVER_ENABLED}},
            "autoSelectBuilderToken"={{AUTO_SELECT_BUILDER_TOKEN}},
            "buildTimeoutMS"={{BUILD_TIMEOUT_MS}},
            "defaultPrivateJobQuota"={{DEFAULT_PRIVATE_JOB_QUOTA}},
            "serviceUserToken"='{{SERVICE_USER_TOKEN}}',
            "vaultUrl"='{{VAULT_URL}}',
            "vaultToken"='{{VAULT_TOKEN}}',
            "vaultRefreshTimeInSec"={{VAULT_REFRESH_TIME_SEC}},
            "amqpUrl"='{{AMQP_URL}}',
            "amqpUrlRoot"='{{AMQP_URL_ROOT}}',
            "amqpUrlAdmin"='{{AMQP_URL_ADMIN}}',
            "amqpDefaultExchange"='{{AMQP_DEFAULT_EXCHANGE}}',
            "apiUrl"='{{API_URL}}',
            "apiPort"={{API_PORT}},
            "wwwUrl"='{{WWW_URL}}',
            "runMode"='{{RUN_MODE}}',
            "rootQueueList"='{{ROOT_QUEUE_LIST}}',
            "execImage"='{{EXEC_IMAGE}}',
            "updatedAt"='{{UPDATED_AT}}',
            "dynamicNodesSystemIntegrationId"='{{DYNAMIC_NODES_SYSTEM_INTEGRATION_ID}}',
            "systemNodePrivateKey"='{{SYSTEM_NODE_PRIVATE_KEY}}',
            "systemNodePublicKey"='{{SYSTEM_NODE_PUBLIC_KEY}}',
            "allowSystemNodes"={{ALLOW_SYSTEM_NODES}},
            "allowDynamicNodes"={{ALLOW_DYNAMIC_NODES}},
            "allowCustomNodes"={{ALLOW_CUSTOM_NODES}},
            "consoleMaxLifespan"={{CONSOLE_MAX_LIFESPAN}},
            "consoleCleanupHour"={{CONSOLE_CLEANUP_HOUR}},
            "customHostDockerVersion"='{{CUSTOM_HOST_DOCKER_VERSION}}',
            "wwwPort"={{WWW_PORT}},
            "redisUrl"='{{REDIS_URL}}',
            "awsAccountId"='{{AWS_ACCOUNT_ID}}',
            "jobConsoleBatchSize"={{JOB_CONSOLE_BATCH_SIZE}},
            "jobConsoleBufferTimeInterval"={{JOB_CONSOLE_BUFFER_TIME_INTERVAL}},
            "defaultCronLoopHours"={{DEFAULT_CRON_LOOP_HOURS}},
            "apiRetryInterval"={{API_RETRY_INTERVAL}},
            "vortexUrl"='{{VORTEX_URL}}',
            "cloudProviders"='{{CLOUD_PROVIDERS}}',
            "truck"={{TRUCK}},
            "hubspotTimeLimit"={{HUBSPOT_TIME_LIMIT}},
            "hubspotListId"={{HUBSPOT_LIST_ID}},
            "hubspotShouldSimulate"={{HUBSPOT_SHOULD_SIMULATE}}
        where id=1;
    end if;

    --Update token in accounts if serviceUser is already created
    if exists (select 1 from information_schema.columns where table_name = 'accountTokens') then
        if exists (select 1 from "accountTokens" where "name" = 'serviceUser' and "isInternal" = true) then
          update "accountTokens" set "apiToken"='{{SERVICE_USER_TOKEN}}' where "name" = 'serviceUser' and "isInternal" = true;
        end if;
    end if;

    if not exists (select 1 from "systemConfigs" where "id" = 1) then
        insert into "systemConfigs"
          (
            "id",
            "defaultMinionCount",
            "defaultPipelineCount",
            "serverEnabled",
            "autoSelectBuilderToken",
            "buildTimeoutMS",
            "defaultPrivateJobQuota",
            "serviceUserToken",
            "vaultUrl",
            "vaultToken",
            "vaultRefreshTimeInSec",
            "amqpUrl",
            "amqpUrlRoot",
            "amqpUrlAdmin",
            "amqpDefaultExchange",
            "apiUrl",
            "apiPort",
            "wwwUrl",
            "runMode",
            "rootQueueList",
            "execImage",
            "createdAt",
            "updatedAt",
            "dynamicNodesSystemIntegrationId",
            "systemNodePrivateKey",
            "systemNodePublicKey",
            "allowSystemNodes",
            "allowDynamicNodes",
            "allowCustomNodes",
            "consoleMaxLifespan",
            "consoleCleanupHour",
            "customHostDockerVersion",
            "wwwPort",
            "redisUrl",
            "awsAccountId",
            "jobConsoleBatchSize",
            "jobConsoleBufferTimeInterval",
            "defaultCronLoopHours",
            "apiRetryInterval",
            "vortexUrl",
            "cloudProviders",
            "truck",
            "hubspotTimeLimit",
            "hubspotListId",
            "hubspotShouldSimulate"
          )
        values
          (
            1,
            {{DEFAULT_MINION_COUNT}},
            {{DEFAULT_PIPELINE_COUNT}},
            {{SERVER_ENABLED}},
            {{AUTO_SELECT_BUILDER_TOKEN}},
            {{BUILD_TIMEOUT_MS}},
            {{DEFAULT_PRIVATE_JOB_QUOTA}},
            '{{SERVICE_USER_TOKEN}}',
            '{{VAULT_URL}}',
            '{{VAULT_TOKEN}}',
            {{VAULT_REFRESH_TIME_SEC}},
            '{{AMQP_URL}}',
            '{{AMQP_URL_ROOT}}',
            '{{AMQP_URL_ADMIN}}',
            '{{AMQP_DEFAULT_EXCHANGE}}',
            '{{API_URL}}',
            {{API_PORT}},
            '{{WWW_URL}}',
            '{{RUN_MODE}}',
            '{{ROOT_QUEUE_LIST}}',
            '{{EXEC_IMAGE}}',
            '{{CREATED_AT}}',
            '{{UPDATED_AT}}',
            '{{DYNAMIC_NODES_SYSTEM_INTEGRATION_ID}}',
            '{{SYSTEM_NODE_PRIVATE_KEY}}',
            '{{SYSTEM_NODE_PUBLIC_KEY}}',
            {{ALLOW_SYSTEM_NODES}},
            {{ALLOW_DYNAMIC_NODES}},
            {{ALLOW_CUSTOM_NODES}},
            {{CONSOLE_MAX_LIFESPAN}},
            {{CONSOLE_CLEANUP_HOUR}},
            '{{CUSTOM_HOST_DOCKER_VERSION}}',
            {{WWW_PORT}},
            '{{REDIS_URL}}',
            '{{AWS_ACCOUNT_ID}}',
            {{JOB_CONSOLE_BATCH_SIZE}},
            {{JOB_CONSOLE_BUFFER_TIME_INTERVAL}},
            {{DEFAULT_CRON_LOOP_HOURS}},
            {{API_RETRY_INTERVAL}},
            '{{VORTEX_URL}}',
            '{{CLOUD_PROVIDERS}}',
            {{TRUCK}},
            {{HUBSPOT_TIME_LIMIT}},
            {{HUBSPOT_LIST_ID}},
            {{HUBSPOT_SHOULD_SIMULATE}}
          );
    end if;
  end
$$;

-- set not null for newly added fields in systemConfigs
do $$
  begin
    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'wwwPort') then
      alter table "systemConfigs" alter column "wwwPort" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'redisUrl') then
      alter table "systemConfigs" alter column "redisUrl" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'jobConsoleBatchSize') then
      alter table "systemConfigs" alter column "jobConsoleBatchSize" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'jobConsoleBufferTimeInterval') then
      alter table "systemConfigs" alter column "jobConsoleBufferTimeInterval" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'defaultCronLoopHours') then
      alter table "systemConfigs" alter column "defaultCronLoopHours" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'apiRetryInterval') then
      alter table "systemConfigs" alter column "apiRetryInterval" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'vortexUrl') then
      alter table "systemConfigs" alter column "vortexUrl" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'cloudProviders') then
      alter table "systemConfigs" alter column "cloudProviders" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'truck') then
      alter table "systemConfigs" alter column "truck" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'hubspotShouldSimulate') then
      alter table "systemConfigs" alter column "hubspotShouldSimulate" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'hubspotTimeLimit') then
      alter table "systemConfigs" alter column "hubspotTimeLimit" set not null;
    end if;

    if exists (select 1 from information_schema.columns where table_name = 'systemConfigs' and column_name = 'hubspotListId') then
      alter table "systemConfigs" alter column "hubspotListId" set not null;
    end if;
  end
$$;

do $$
  begin
    --Update values in systemConfigs
    if exists (select 1 from "systemConfigs" where "id" = 1) then
        update "systemConfigs" SET
            "defaultMinionCount"={{DEFAULT_MINION_COUNT}},
            "defaultPipelineCount"={{DEFAULT_PIPELINE_COUNT}},
            "serverEnabled"="serverEnabled",
            "buildTimeoutMS"={{BUILD_TIMEOUT_MS}},
            "defaultPrivateJobQuota"={{DEFAULT_PRIVATE_JOB_QUOTA}},
            "serviceUserToken"='{{SERVICE_USER_TOKEN}}',
            "vaultUrl"='{{VAULT_URL}}',
            "vaultToken"='{{VAULT_TOKEN}}',
            "vaultRefreshTimeInSec"={{VAULT_REFRESH_TIME_SEC}},
            "cachingEnabled"={{CACHING_ENABLED}},
            "hubspotEnabled"={{HUBSPOT_ENABLED}},
            "amqpUrl"='{{AMQP_URL}}',
            "amqpUrlRoot"='{{AMQP_URL_ROOT}}',
            "amqpUrlAdmin"='{{AMQP_URL_ADMIN}}',
            "amqpDefaultExchange"='{{AMQP_DEFAULT_EXCHANGE}}',
            "apiUrl"='{{API_URL}}',
            "apiPort"={{API_PORT}},
            "wwwUrl"='{{WWW_URL}}',
            "runMode"='{{RUN_MODE}}',
            "rootQueueList"='{{ROOT_QUEUE_LIST}}',
            "execImage"='{{EXEC_IMAGE}}',
            "updatedAt"='{{UPDATED_AT}}'
        where id=1;
    end if;

    --Update token in accounts if serviceUser is already created
    if exists (select 1 from information_schema.columns where table_name = 'accountTokens') then
        if exists (select 1 from "accountTokens" where "name" = 'serviceUser' and "isInternal" = true) then
          update "accountTokens" set "apiToken"='{{SERVICE_USER_TOKEN}}' where "name" = 'serviceUser' and "isInternal" = true;
        end if;
    end if;

    if not exists (select 1 from "systemConfigs" where "id" = 1) then
        insert into "systemConfigs"
          (
            "id",
            "defaultMinionCount",
            "defaultPipelineCount",
            "serverEnabled",
            "buildTimeoutMS",
            "defaultPrivateJobQuota",
            "serviceUserToken",
            "vaultUrl",
            "vaultToken",
            "vaultRefreshTimeInSec",
            "cachingEnabled",
            "hubspotEnabled",
            "amqpUrl",
            "amqpUrlRoot",
            "amqpUrlAdmin",
            "amqpDefaultExchange",
            "apiUrl",
            "apiPort",
            "wwwUrl",
            "runMode",
            "rootQueueList",
            "execImage",
            "createdAt",
            "updatedAt"
          )
        values
          (
            1,
            {{DEFAULT_MINION_COUNT}},
            {{DEFAULT_PIPELINE_COUNT}},
            {{SERVER_ENABLED}},
            {{BUILD_TIMEOUT_MS}},
            {{DEFAULT_PRIVATE_JOB_QUOTA}},
            '{{SERVICE_USER_TOKEN}}',
            '{{VAULT_URL}}',
            '{{VAULT_TOKEN}}',
            {{VAULT_REFRESH_TIME_SEC}},
            {{CACHING_ENABLED}},
            {{HUBSPOT_ENABLED}},
            '{{AMQP_URL}}',
            '{{AMQP_URL_ROOT}}',
            '{{AMQP_URL_ADMIN}}',
            '{{AMQP_DEFAULT_EXCHANGE}}',
            '{{API_URL}}',
            {{API_PORT}},
            '{{WWW_URL}}',
            '{{RUN_MODE}}',
            '{{ROOT_QUEUE_LIST}}',
            '{{EXEC_IMAGE}}',
            '{{CREATED_AT}}',
            '{{UPDATED_AT}}'
          );
    end if;
  end
$$;
